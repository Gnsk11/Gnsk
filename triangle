#include "pch.h"
#include "functions.h"
#include <iostream>

using namespace std;

int main(int argc, char* argv[])
{
	input_source_type input_source;
	char* x = new char[20];
	float* a = new float[3];
	if (argc == 4)
	{
		input_source = args;
		read_sides(x, a, input_source, argv);
	}
	else
	{
		input_source = keyboard;
		read_sides(x, a, input_source, argv);
	}

	condition cond;
	cond = check_triangle(a);
	output(cond);
	if (cond == 0)
	{
		cond = check_right_triangle(a);
		output(cond);
	}

	return 0;
}


/////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "stdafx.h"
#include "functions.h"

enum input_source_type
{
	args,
	keyboard
};

enum condition
{
	triangle_exists,
	triangle_does_not_exist,
	right_triangle_exists,
	right_triangle_does_not_exist
};

void input(char*, int);

void read_sides(char*, float*, input_source_type, char**);
bool check_input(char*);
void clean_bufer();

condition check_triangle(float*);
condition check_right_triangle(float*);
void output(condition);


//////////////////////////////////////////////////////////

#include "stdafx.h"
#include <iostream>
#include "functions.h"

using namespace std;

void input(char* x, int i)
{
	x[0] = '\0';
	printf("\n%s%d%s", "Enter the length of the ", i + 1, " side : ");
	scanf_s("%[^\n]19s", x, 20);
	clean_bufer();
}

void read_sides(char * x, float* a, input_source_type input_source, char* argv[])
{
	for (int i = 0; i < 3;)
	{
		if (input_source == keyboard)
		{
			input(x, i);
		}
		else
		{
			x[0] = '\0';
			x = argv[i + 1];
		}
		if (check_input(x))
		{
			char * ptrEnd;
			a[i] = strtof(x, &ptrEnd);
			i++;
		}
		else
		{
			printf("\n%s", "Error, reenter!\n");
			if (input_source == true)
			{
				break;
			}
		}
	}
	delete x;
}

bool check_input(char* x)
{
	bool tf = true;
	int f = strlen(x);
	for (int i = 0; i < f; i++)
	{
		if (isalpha(x[i]) || x[i] == '0')
		{
			tf = false;
		}
	}
	if (x[0] == '\0')
	{
		tf = false;
	}
	return tf;
}

void clean_bufer()
{
	int c;
	do {
		c = getchar();
	} while (c != '\n' && c != EOF);
}

condition check_triangle(float* a)
{
	condition p;
	bool tf = true;
	for (int i = 0; i < 3; i++)
	{
		tf &= a[i] + a[(i + 1) % 3] > a[(i + 2) % 3];
	}
	if (tf)
	{
		p = triangle_exists;
	}
	else
	{
		p = triangle_does_not_exist;
	}
	return p;
}


condition check_right_triangle(float* a)
{
	condition p;
	bool tf = false;
	for (int i = 0; i < 3; i++)
	{
		tf |= a[i] * a[i] + a[(i + 1) % 3] * a[(i + 1) % 3] == a[(i + 2) % 3] * a[(i + 2) % 3];
	}

	if (tf)
	{
		p = right_triangle_exists;
	}
	else
	{
		p = right_triangle_does_not_exist;
	}
	return p;
}

void output(condition p)
{
	switch (p)
	{
	case triangle_exists: printf("%s", "triangle exists\n");
		break;
	case triangle_does_not_exist: printf("%s", "triangle does not exist\n");
		break;
	case right_triangle_exists: printf("%s", "right triangle exists\n");
		break;
	case right_triangle_does_not_exist: printf("%s", "right triangle does not exist\n");
		break;
	}
}
